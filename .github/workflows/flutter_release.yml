name: Flutter CD Release

on: [push]

jobs:
   build:
     strategy:
       matrix:
         variants:
           - type: Debug
             command: --debug
#          - type: Release
#            command: --release
           - type: Split per ABI
             command: --split-per-abi
     name: Build ${{ matrix.variants.type }} APK
     runs-on: ubuntu-latest
     steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Setup Java
          uses: actions/setup-java@v3
          with:
            distribution: 'adopt'
            java-version: '16'
#       - name: Set GCC Path
#         run: > 
#           find -L $ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION -name libunwind.a -execdir sh -c 'echo "INPUT(-lunwind)" > libgcc.a' \;
#       - name: Set up cargo cache
#         uses: actions/cache@v3
#         continue-on-error: false
#         with:
#           path: |
#             ~/.cargo/bin/
#             ~/.cargo/registry/index/
#             ~/.cargo/registry/cache/
#             ~/.cargo/git/db/
#             target/            
#           key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#           restore-keys: ${{ runner.os }}-cargo-        
#       - name: Build Rust lib
#         run: cd rust && make init && make android && cd ..
#       - name: Copy libs
#         run: |
#           mv rust/target/aarch64-linux-android/release/libstorage.so android/app/src/main/jniLibs/arm64-v8a/libstorage.so
#           mv rust/target/armv7-linux-androideabi/release/libstorage.so android/app/src/main/jniLibs/armeabi-v7a/libstorage.so
#           mv rust/target/i686-linux-android/release/libstorage.so android/app/src/main/jniLibs/x86/libstorage.so
#           mv rust/target/x86_64-linux-android/release/libstorage.so android/app/src/main/jniLibs/x86_64/libstorage.so
        - name: Cache Flutter dependencies
          uses: actions/cache@v3
          with:
            path: |
              /opt/hostedtoolcache/flutter
              build
            key: ${{ runner.OS }}-flutter-install-cache
        - uses: subosito/flutter-action@v2
          with:
            channel: 'stable'
        - name: Cache pub dependencies
          uses: actions/cache@v2
          with:
            path: ${{ env.FLUTTER_HOME }}/.pub-cache
            key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
            restore-keys: ${{ runner.os }}-pub-
        - name: Download pub dependencies
          run: flutter pub get
        - name: Build APK
          run: flutter build apk ${{ matrix.variants.command }} --obfuscate --split-debug-info=build/
        - name: Upload to Artifacts
          uses: actions/upload-artifact@v2
          with:
            name: builed APK
            path: build/app/outputs/flutter-apk/*
   release:
     needs:
       - build
     name: Release
     runs-on: ubuntu-latest
     steps:
        - name: Checkout Repo
          uses: actions/checkout@v2
        - name: Make Files Dir
          run: mkdir builedApk
        - name: Download Artifacts
          uses: actions/download-artifact@v2
          with:
            name: builed APK
            path: builedApk
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +%Y%m%d%H%M)"
        - name: Test with environment variables
          run: echo $TAG_NAME - $RELEASE_NAME
          env:
            TAG_NAME: EFile-${{ steps.date.outputs.date }}
            RELEASE_NAME: EFile-${{ steps.date.outputs.date }}
        - name: Upload To release 
          uses: softprops/action-gh-release@v1
          with:
            tag_name: EFile-${{ steps.date.outputs.date }}
            files: builedApk/app-debug.apk
        - name: Send to Telegram
          run: |
            curl -F document=@"builedApk/app-arm64-v8a-release.apk" https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument?chat_id=${{ secrets.TELEGRAM_TO }}
        - name: Delete Artifacts
          uses: geekyeggo/delete-artifact@v1
          with:
            name: builed APK
